ConnectedOrgVersion            : 9.1.0.876
DataMigrationUtilityVersion    : 3.3.0.975

$Meta = Get-CrmEntityAllMetadata -conn $Conn -EntityFilters All
@($meta | Where { $_.IsImportable -eq "True" }).Attributes 
    | Where { $_.IsValidForUpdate -eq "True" } 
    | Select LogicalName,EntityLogicalName -ExpandProperty AttributetypeName 
    | Sort -Property Value -Unique 
    | Select Value, LogicalName, EntityLogicalName

Value                LogicalName                        EntityLogicalName                         
-----                -----------                        -----------------                         
BooleanType          isdefaulttheme                     theme 
CustomerType         customerid                         incident                                  
DateTimeType         publishon                          knowledgearticle
DecimalType          msdyn_hours                        msdyn_resourcerequirementdetail           
DoubleType           msdyn_quantity                     msdyn_purchaseorderproduct                
EntityNameType       owneridtype                        knowledgearticle                    How to handle? modify XML to export?                                    
ImageType            entityimage                        contract                            Is not enabled for "IsRetrievable"
IntegerType          expirationstateid                  knowledgearticle
LookupType           previousarticlecontentid           knowledgearticle
ManagedPropertyType  iscustomizable                     kbarticletemplate                   Is not enabled for "IsRetrievable"
MemoType             keywords                           knowledgearticle
MoneyType            totaltax                           invoice                                   
OwnerType            ownerid                            knowledgearticle                           
PartyListType        customers                          msdyn_approval                      Is not enabled for "IsRetrievable", but it appears to work.. so will include
PicklistType         expiredreviewoptions               knowledgearticle
StateType            statecode                          knowledgearticle  
StatusType           statuscode                         knowledgearticle
StringType           description                        knowledgearticle
UniqueidentifierType stageid                            knowledgearticle
VirtualType          servicetypename                    sharepointdocument                  Is not enabled for "IsRetrievable"

namespace Microsoft.Xrm.Tooling.Connector: public enum CrmFieldType
    CrmBoolean,
    CrmDateTime,
    CrmDecimal,
    CrmFloat,
    CrmMoney,
    CrmNumber,
    Customer,
    Key,
    Lookup,
    Picklist,
    String,
    UniqueIdentifier,
    Raw

Identifying all ManagedPropertyType's in the system and what their actual "type" is:
$meta.attributes | Where { $_.AttributeType -eq "ManagedProperty" } | Select ValueAttributeTypeCode,AttributeType,SchemaName | Sort -Property SchemaName -Unique
ValueAttributeTypeCode   AttributeType SchemaName    
----------------------   ------------- ----------    
               Boolean ManagedProperty CanBeDeleted  
               Boolean ManagedProperty IsCustomizable
               Boolean ManagedProperty IsHidden      
               Boolean ManagedProperty IsPublished   

$request = [Microsoft.Crm.Sdk.Messages.FetchXmlToQueryExpressionRequest]::new()
$request.FetchXml = "<fetch distinct='false' no-lock='false' top='50' mapping='logical'><entity name='knowledgearticle'><attribute name='readyforreview'/></entity></fetch>";
$result = $Conn.Execute($request)
$request = [Microsoft.Xrm.Sdk.Messages.RetrieveMultipleRequest]::new()
$request.Query = $result.Query;
$result = $Conn.Execute($request)
$result.EntityCollection.Entities.count

Input will be either EntityCollection, or Dictionary <string, object>, or PSCustomObject (which will grab .original which is the Dictionary)
Dictionary corresponds to $Conn.GetEntityDataByFetchSearch();
EntityCollection corresponds to $Conn.GetEntityDataByFetchSearchEC();

Retrieve Fetch in various formats to reference when generating test objects:
Function RF {
    param
    (
        [String] $fetch
    )

    $Global:resultsEC = $Conn.GetEntityDataByFetchSearchEC($fetch, [guid]::Empty); 
    $Global:v1 = $resultsEC.Entities[0];

    $Global:results = $Conn.GetEntityDataByFetchSearch($fetch, [guid]::Empty);
    $Global:v2 = $Global:results.Values | Where { $_."ReturnProperty_Id " -eq ($Global:v1.Id.Guid) }

    Write-Output "Entity:";
    Write-Output ($Global:v1);
    Write-Output ($Global:v1.Attributes | Format-Table);
    Write-Output " ";
    Write-Output "Dictionary:";
    Write-Output ($Global:v2 | Format-Table);
}

RF -fetch "<fetch><entity name='incident'><attribute name='customerid'/><filter type='and'><condition attribute='customerid' operator='not-null'/></filter></entity></fetch>";

test

m2m
<fetch>
  <entity name='systemuser' >
    <attribute name='systemuserid' />
    <link-entity name='systemuserroles' from='systemuserid' to='systemuserid' intersect='true' >
      <link-entity name='role' from='roleid' to='roleid' />
      <attribute name='roleid' />
    </link-entity>
    <filter>
      <condition attribute='systemuserid' operator='eq' value='00e7b0b9-1ace-e711-a970-000d3a192311' />
    </filter>
  </entity>
</fetch>
<resultset morerecords="0" paging-cookie="&lt;cookie page=&quot;1&quot;&gt;&lt;systemuserid last=&quot;{00E7B0B9-1ACE-E711-A970-000D3A192311}&quot; first=&quot;{00E7B0B9-1ACE-E711-A970-000D3A192311}&quot; /&gt;&lt;/cookie&gt;">
  <result>
    <systemuserid>{00E7B0B9-1ACE-E711-A970-000D3A192311}</systemuserid>
    <systemuserid.roleid>{CAD52A75-568C-E611-80D4-00155D42A122}</systemuserid.roleid>
  </result>

  <resultset morerecords="0" paging-cookie="&lt;cookie page=&quot;1&quot;&gt;&lt;systemuserid last=&quot;{00E7B0B9-1ACE-E711-A970-000D3A192311}&quot; first=&quot;{00E7B0B9-1ACE-E711-A970-000D3A192311}&quot; /&gt;&lt;/cookie&gt;">
  <result>
    <systemuserid>{00E7B0B9-1ACE-E711-A970-000D3A192311}</systemuserid>
    <roleid.roleid>{CAD52A75-568C-E611-80D4-00155D42A122}</roleid.roleid>
  </result>


<entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" timestamp="3/23/2019 10:34:54 AM">
  <entity name="systemuser" displayname="User">
    <records>
      <record id="00e7b0b9-1ace-e711-a970-000d3a192311" />
    </records>
    <m2mrelationships>
      <m2mrelationship sourceid="00e7b0b9-1ace-e711-a970-000d3a192311" targetentityname="role" targetentitynameidfield="roleid" m2mrelationshipname="systemuserroles">
        <targetids>
          <targetid>cad52a75-568c-e611-80d4-00155d42a122</targetid>
          <targetid>3dac4d9e-568c-e611-80d4-00155d42a122</targetid>
          <targetid>85d865b5-fea1-e611-8116-00155da84013</targetid>
          <targetid>e186d6f0-28d6-4bfc-bea5-71e44c3e13a4</targetid>
          <targetid>52d9415f-86f4-e611-8128-e0071b6a4261</targetid>
        </targetids>
      </m2mrelationship>
    </m2mrelationships>
  </entity>
</entities>

<entities >
  <entity name="systemuser" displayname="User" etc="8" primaryidfield="systemuserid" primarynamefield="fullname" disableplugins="false">
    <relationships>
      <relationship name="systemuserroles" manyToMany="true" isreflexive="false" relatedEntityName="systemuserroles" m2mTargetEntity="role" m2mTargetEntityPrimaryKey="roleid" />
    </relationships>
  </entity>
</entities>

$Meta | Where { $_.logicalname -eq "systemuser" } | Select -ExpandProperty ManyToManyRelationships | Where { $_.IntersectEntityName -eq "systemuserroles" }

Entity1AssociatedMenuConfiguration : Microsoft.Xrm.Sdk.Metadata.AssociatedMenuConfiguration
Entity2AssociatedMenuConfiguration : Microsoft.Xrm.Sdk.Metadata.AssociatedMenuConfiguration
Entity1LogicalName                 : systemuser
Entity2LogicalName                 : role
IntersectEntityName                : systemuserroles
Entity1IntersectAttribute          : systemuserid
Entity2IntersectAttribute          : roleid
Entity1NavigationPropertyName      : systemuserroles_association
Entity2NavigationPropertyName      : systemuserroles_association
IsCustomRelationship               : False
IsCustomizable                     : Microsoft.Xrm.Sdk.BooleanManagedProperty
IsValidForAdvancedFind             : True
SchemaName                         : systemuserroles_association
SecurityTypes                      : None
IsManaged                          : True
RelationshipType                   : ManyToManyRelationship
IntroducedVersion                  : 5.0.0.0
MetadataId                         : 8b366d6e-d389-11db-9246-00123f3a1b51
HasChanged                         : 
ExtensionData                      : System.Runtime.Serialization.ExtensionDataObject

public void AppendData(String fetchXml)
        {
            RetrieveMultipleRequest req = new RetrieveMultipleRequest
            {
                Query = new FetchExpression(fetchXml)
            };

            RetrieveMultipleResponse retrieveMultipleResponse = (RetrieveMultipleResponse)this._service.Execute(req);

            if (retrieveMultipleResponse != null)
            {
                if (HasManyToManyAttribute(fetchXml)) {
                    AppendM2MData(retrieveMultipleResponse.EntityCollection);
                } else {
                    AppendData(retrieveMultipleResponse.EntityCollection);
                }
            }
            else
            {
                throw new Exception("Failed to retrieve fetch results.");
            }
        }

        private void AppendM2MData(EntityCollection queryResponse)
        {
            var SourceEntity = queryResponse.EntityName;
            var SourceGuid = queryResponse.Entities[0].Id;
            var SourcePrimaryField = (Guid)queryResponse.Entities[0].Attributes.Where(x => x.Value is Guid).First().Value;
            var SourceOtherField = (AliasedValue)queryResponse.Entities[0].Attributes.Where(x => x.Value is AliasedValue).First().Value;
            
            //<fetch>
            //  <entity name='systemuser' >
            //    <attribute name='systemuserid' />
            //    <link-entity name='systemuserroles' from='systemuserid' to='systemuserid' intersect='true' >
            //      <link-entity name='role' from='roleid' to='roleid' />
            //      <attribute name='roleid' />
            //    </link-entity>
            //    <filter>
            //      <condition attribute='systemuserid' operator='eq' value='00e7b0b9-1ace-e711-a970-000d3a192311' />
            //    </filter>
            //  </entity>
            //</fetch>

            //FetchXmlToQueryExpressionRequest req = new FetchXmlToQueryExpressionRequest
            //{
            //    FetchXml = fetchXml
            //};
            //FetchXmlToQueryExpressionResponse FetchXmlToQueryExpressionResponse = (FetchXmlToQueryExpressionResponse)this._service.Execute(req);

            throw new NotImplementedException();
        }

        private bool HasManyToManyAttribute(string fetchXml)
        {
            XmlDocument xml = new XmlDocument();
            xml.LoadXml(fetchXml);

            if (xml.SelectSingleNode("fetch/entity/link-entity[@intersect='true']//attribute") != null)
            {
                return true;
            }

            return false;
        }